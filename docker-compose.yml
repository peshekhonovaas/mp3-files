services:
  eureka-server:
    platform: linux/amd64
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    environment:
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: ${EUREKA_CLIENT_REGISTER_WITH_EUREKA}
      EUREKA_CLIENT_FETCH_REGISTRY: ${EUREKA_CLIENT_FETCH_REGISTRY}
      LOGGING_LEVEL_COM_NETFLIX_EUREKA: ${LOGGING_LEVEL_COM_NETFLIX_EUREKA}
      LOGGING_LEVEL_COM_NETFLIX_DISCOVERY: ${LOGGING_LEVEL_COM_NETFLIX_DISCOVERY}
    ports:
      - "8761:8761"
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8761/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  cloud-gateway:
    platform: linux/amd64
    build:
      context: .
      dockerfile: cloud-gateway/Dockerfile
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      GATEWAY_ROUTE_RESOURCE_SERVICE_PATH: ${GATEWAY_ROUTE_RESOURCE_SERVICE_PATH}
      GATEWAY_ROUTE_RESOURCE_SERVICE_URI: ${GATEWAY_ROUTE_RESOURCE_SERVICE_URI}
      GATEWAY_ROUTE_SONG_SERVICE_PATH: ${GATEWAY_ROUTE_SONG_SERVICE_PATH}
      GATEWAY_ROUTE_SONG_SERVICE_URI: ${GATEWAY_ROUTE_SONG_SERVICE_URI}
      GATEWAY_ROUTE_RESOURCE_PROCESSOR_PATH: ${GATEWAY_ROUTE_RESOURCE_PROCESSOR_PATH}
      GATEWAY_ROUTE_RESOURCE_PROCESSOR_URI: ${GATEWAY_ROUTE_RESOURCE_PROCESSOR_URI}
      GATEWAY_ROUTE_MESSAGE_BROKER_PATH: ${GATEWAY_ROUTE_MESSAGE_BROKER_PATH}
      GATEWAY_ROUTE_MESSAGE_BROKER_URI: ${GATEWAY_ROUTE_MESSAGE_BROKER_URI}
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY: DEBUG
      LOGGING_LEVEL_REACTOR_NETTY_HTTP_CLIENT: DEBUG
    ports:
      - "8085:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8080/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"

  rabbitmq:
    platform: linux/amd64
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: [
        "CMD-SHELL",
        "rabbitmqctl status || exit 1"
      ]
      interval: 10s
      timeout: 5s
      retries: 5

  message-broker:
    platform: linux/amd64
    build:
      context: .
      dockerfile: message-broker/Dockerfile
    environment:
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_EXCHANGE_NAME: ${RABBITMQ_EXCHANGE_NAME}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8099/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  song-db:
    image: postgres:17-alpine3.21
    environment:
      POSTGRES_DB: ${DB_SONG_NAME}
      POSTGRES_USER: ${DB_SONG_USER}
      POSTGRES_PASSWORD: ${DB_SONG_PASS}
    volumes:
      - ./init-scripts/song-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_SONG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  song-service:
    platform: linux/amd64
    build:
      context: .
      dockerfile: song-service/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${DB_SONG_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_SONG_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_SONG_PASS}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    deploy:
      replicas: 1
    depends_on:
      song-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:9091/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-db:
    image: postgres:17-alpine3.21
    environment:
      POSTGRES_DB: ${DB_RESOURCE_NAME}
      POSTGRES_USER: ${DB_RESOURCE_USER}
      POSTGRES_PASSWORD: ${DB_RESOURCE_PASS}
    volumes:
      - ./init-scripts/resource-db:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_RESOURCE_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-service:
    platform: linux/amd64
    build:
      context: .
      dockerfile: resource-service/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${DB_RESOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_RESOURCE_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_RESOURCE_PASS}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      RABBITMQ_MANAGER_URL: ${RABBITMQ_MANAGER_URL}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    depends_on:
      resource-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:9090/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  resource-processor:
    platform: linux/amd64
    build:
      context: .
      dockerfile: resource-processor/Dockerfile
    environment:
      RABBITMQ_MANAGER_URL: ${RABBITMQ_MANAGER_URL}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:9092/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

